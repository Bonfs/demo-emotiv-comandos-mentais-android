package com.projeto.dao;import com.emotiv.insight.IEdk;import com.projeto.interfaces.EngineConnectorInterface;import com.projeto.util.Emotiv;import com.projeto.util.Util;import android.content.Context;import android.os.Handler;import android.os.Message;import android.util.Log;import java.util.Timer;import java.util.TimerTask;public class EngineConnector {	private EngineConnectorInterface delegate;    private Context context;    private static EngineConnector engineInstance = null;	public static EngineConnector shareInstance(Object obj) {		if (engineInstance == null) {			engineInstance = new EngineConnector((Context) obj, (EngineConnectorInterface) obj);		}		return engineInstance;	}	private EngineConnector(Context context, EngineConnectorInterface delegate) {        this.context = context;		this.delegate = delegate;		connectEngine();		createTimerTask();	}	private void connectEngine() {		/*		 * Inicializa a conexão com o EmoEngine, após isso o		 * software está preparado para fazer qualquer requisição		 * ao EmoEngine		 */		 IEdk.IEE_EngineConnect(this.context, "");	}	private void createTimerTask(){		// Roda um TimerTask com delay inicial 0 a cada 10 milissegundos		new Timer().schedule(initTimerTask(), 0, 10);	}	private TimerTask initTimerTask() {		return new TimerTask() {			@Override			public void run() {				/*				 * Se não houver conexão tenta conectar até um dispositivo Emotiv ser				 * encontrado com o evento user added.				 */				if (!Emotiv.isConnected()) {                    /*Conexão com Epoc Plus*/					int numberDevice = IEdk.IEE_GetEpocPlusDeviceCount();					if (numberDevice != 0) {						Log.d(Util.TAG, "Conectando-se...");						if (!Emotiv.isConnected()) {							// Conecta Epoc+, posicao 0 na lista, modo de configuração falso							IEdk.IEE_ConnectEpocPlusDevice(0, false);						}					}					// Recupera o pŕoximo evento de EmoEngine					// Retorna OK, ERROR ou NO EVENT					int state = IEdk.IEE_EngineGetNextEvent();					if (state == Emotiv.OK) {						int typeEvent = IEdk.IEE_EmoEngineEventGetType();						if (typeEvent == Emotiv.USER_ADDED) {							Log.d(Util.TAG, "Emotiv Conectado");							Emotiv.setConnected(true);							// Retorna o ID do usuário padrão							Emotiv.setUserID(IEdk.IEE_EmoEngineEventGetUserId());							handler.sendEmptyMessage(Emotiv.USER_ADDED);						}					}				}			}		};	}	private Handler handler = new Handler() {		@Override		public void handleMessage(Message msg) {			if (delegate != null){				if (msg.what == Emotiv.USER_ADDED)					delegate.onUserAdd();			}		}	};}